https://nodejs.org/en/
https://www.mongodb.com/what-is-mongodb
https://code.visualstudio.com/
https://github.com/
https://github.com/Aakashdeveloper

Redis
Postgres
Docker
Nginx
Aws

-------
dependency
node_modules
packages
node lib

--------------
JSON
<
[
    {
        "name":"john",
        "class":"node"
    },
    {
        "name":"ammy",
        "class":"ang",
        "time":40
    }
]

------------
local packages

global packages

-------

///////////////
Step to createPackage.json 
//////////////
**NodeJs must bee installed in system
> navigate to the folder using cmd/terminal
> npm init
> Answer all questions
> type 'yes'

//////
Step to install Local dependency
////////
> navigate to the folder using cmd/terminal
> npm i <packages>/npm install <packages> / npm install <packages> --save


//////
Step to install Global dependency
////////
//Window
> run cmd as admin
> npm i -g nodemon

//mac linux
> open terminal
> sudo npm i -g nodemon


>>>>>>>>>>
Generate Node app
<<<<<<<<
//One time
> sudo npm i -g @aakashdeveloper/create-node-app
Every time
> navigate to the folder using cmd/terminal
> generate 
> select node app
> project name
> cd myapp
> npm start
> localhost:7600


>>>>>>><<<<<<<
github
>>>>>>><<<<<<<

git init
git add .
git commit -m "first commit"
git remote add origin https://github.com/Aakashdeveloper/Edu_Jan_Node_Eveng_20.git
git push -u origin master

//////

git add .
git commit -m "adding extra"
git push


>>>>>
http 
fs 
express
> static api


CRUD
> create (POST)
> read   (GET)
> update (PUT)
> delete (Delete)

/////
Pm2
/////

>npm i -g pm2 
>pm2 start app.js
>pm2 list
>pm2 stop app.js

>> install install
>> open nginx.conf
>> add server configuration
>> nginx

	server {

		listen 8089;
		server_name localhost;
		location / {
		proxy_pass http://127.0.0.1:3500;
	    	proxy_http_version 1.1;
    	    	proxy_set_header Upgrade $http_upgrade;
            	proxy_set_header Connection 'upgrade';
            	proxy_set_header Host $host;
            	proxy_cache_bypass $http_upgrade;

		
		}

	}

      #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        proxy_pass http://127.0.0.1:3500;
	    	proxy_http_version 1.1;
    	    	proxy_set_header Upgrade $http_upgrade;
            	proxy_set_header Connection 'upgrade';
            	proxy_set_header Host $host;
            	proxy_cache_bypass $http_upgrade;
    #    }
    #}

    sudo nginx -s stop

////
inbuilt
fs
static api
express
express routing
pm2
nginx


//////
var a = 10
var b = "my age is "+a 
my age is 10

var c = `my age is ${a}`

npm i ejs express request
////////

SQL

sno |  english | hindi
 1  | 80       |
 2  |          |80

 -----------

NoSql

[
    {
        "sno":1,
        "english":80
    },
    {
        "sno":2,
        "hindi":80
    }
]

---------
SQL          NoSql
Database     Database
Table        Collections
Row          Document
Mysql        mongodb



---------------
Install mongodb

Window
> C:\data\db


Mac
sudo mkdir /System/Volumes/Data/data/db

Window
C:/data/db

How to run mongodb
> Open two terminal 
    1> Mongo server (should alawys running)
    2> Mongo console ( To test query)

Use cmd and naviagte
> C:Program/Mongo/3.4/bin
> mongod  (mongodb server)

>Use cmd and naviagte
> C:Program/Mongo/4.2/bin
> mongod (to start server)
> mongo (to connect with console)

Mac
> Open Terminal
> sudo mongod --dbpath /System/Volumes/Data/data/db
> Open Terminal
> mongo

Default Port
(27017)

//////
 show dbs
 use classpractice
 show collections
 db.myproduct.find()
 db.myproduct.find().pretty()

//Projection
db.myproduct.find({},{class:1})
 db.myproduct.find({},{class:1,_id:0})
 db.myproduct.find({},{class:0,_id:0})
 db.myproduct.find({},{id:1,class:1,_id:0})
 db.myproduct.find({},{id:1,class:1,_id:0}).sort({"rate":1}).limit(3)

//Condition
db.myproduct.find({"id":4},{class:1,_id:0})
db.myproduct.find({"id":4,"class":"Mongo"},{class:1,_id:0})
db.myproduct.find({"id":4,"class":"AI"},{class:1,_id:0})
{ "class" : "AI" }
> db.myproduct.find({"id":4"class":"AI"}{},{class:1,_id:0}).count()
1
> db.myproduct.count()

db.myproduct.find({$or:[{id:4},{class:"Mongo"}]})
db.myproduct.find({$and:[{id:4},{class:"Mongo"}]})
/////////
db.myproduct.insert({"id":6,class:"Ansible",place:"Nareshit"})
db.myproduct.insert({"_id":002,"id":7,class:"Jenkis",place:"Nareshit"})
////////////

db.myproduct.find().sort({"place":-1})
db.myproduct.find().sort({"place":-1}).limit(3)

 db.mytest.insertMany([{"name":"husk",sno:4},{"name":"ben",sno:5}])



 CRUD
 Create Read Update Delete

 Math.floor(Math.random()*(max-min))+min

 npm i @babel/core  @babel/register @babel/preset-env --save-dev

//GraphQl
 npm i axios express express-graphql  graphql lodash

//Get(Query)
 {
  product(id:3){
    name,
    rating,
    price
  }
}

//Post(Mutation)

mutation{
  addProduct(
    id:6,
    name:"Taco",
    rating:5
  ){
    id
  }
}



 //////Dummy Api/////
 npm i -g json-server
 json-server --watch db.json --port 8900


docker run --rm   --name pg-docker -e POSTGRES_PASSWORD=docker -d -p 5432:5432 -v $HOME/docker/volumes/postgres:/var/lib/postgresql/data  postgres


///Login app////
npm i bcryptjs body-parser ejs express jsonwebtoken mongoose node-localstorage


redis-server